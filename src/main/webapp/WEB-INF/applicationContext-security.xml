<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	
	<!-- http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#el-common-built-in -->
	<http entry-point-ref="casEntryPoint" auto-config="false"
		use-expressions="true" access-decision-manager-ref="accessDecisionManager">
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/index" access="permitAll" />
		<intercept-url pattern="/cas/cas-logout" access="permitAll" />
		<intercept-url pattern="/cas/casfailed" access="permitAll" />

		<intercept-url pattern="/utilisateur/**" access="isAuthenticated()" />
		<!-- <intercept-url pattern="/admin/**" access="hasRole('ADMIN')" 
			/> -->
		<intercept-url pattern="/moderateur/**" access="hasRole('MODERATEUR')" />
		<intercept-url pattern="/vie-etudiante/**" access="hasRole('VIE_ETUDIANTE')" />
		
		<intercept-url pattern="/evenement/supprimer/**" access="hasAnyRole('ASSOCIATION,MODERATEUR')" />
		<intercept-url pattern="/evenement/modifier/**" access="hasRole('ASSOCIATION')" />
		<intercept-url pattern="/evenement/creer/**" access="hasRole('ASSOCIATION')" />

		<custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER" />
		<custom-filter ref="singleLogoutFilter" before="CAS_FILTER" />
		<custom-filter ref="casFilter" position="CAS_FILTER" />
		<logout logout-url="/utilisateur/deconnecter"
			logout-success-url="/cas/cas-logout" invalidate-session="true"
			delete-cookies="JSESSIONID" />
		<!-- <csrf disabled="true"/> -->
	</http>

	<authentication-manager alias="authManager">
		<authentication-provider ref="casAuthProvider" />
	</authentication-manager>

	<!-- This filter handles a Single Logout Request from the CAS Server -->
	<b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
	<!-- This filter redirects to the CAS Server to signal Single Logout should 
		be performed -->
	<b:bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter"
		p:filterProcessesUrl="/utilisateur/deconnecter">
		<b:constructor-arg
			value="${cas.protocol}://${cas.server.host}/${cas.app.name}/logout?service=${service.protocol}://${service.host}/${service.app.name}/" />
		<b:constructor-arg>
			<b:bean
				class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</b:constructor-arg>
	</b:bean>

	<b:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties"
		p:service="${service.protocol}://${service.host}/${service.app.name}/j_spring_cas_security_check"
		p:authenticateAllArtifacts="true" p:sendRenew="false" />

	<b:bean id="casEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
		p:serviceProperties-ref="serviceProperties"
		p:loginUrl="${cas.protocol}://${cas.server.host}/${cas.app.name}/login" />

	<b:bean id="casFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter"
		p:authenticationManager-ref="authManager" p:serviceProperties-ref="serviceProperties"
		p:proxyGrantingTicketStorage-ref="pgtStorage"
		p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
		<b:property name="authenticationDetailsSource">
			<b:bean
				class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource" />
		</b:property>
		<b:property name="authenticationFailureHandler">
			<b:bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
				p:defaultFailureUrl="/cas/casfailed" />
		</b:property>
	</b:bean>

	<!-- NOTE: In a real application you should not use an in memory implementation. 
		You will also want to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup() -->
	<b:bean id="pgtStorage"
		class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl" />

	<b:bean id="casAuthProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
		p:serviceProperties-ref="serviceProperties" p:key="casAuthProviderKey">
		<b:property name="authenticationUserDetailsService">
			<b:bean
				class="ipint.glp.controlleurs.security.AuthenticationUserDetailsServiceImpl"><!-- org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper -->
				<!-- <b:constructor-arg ref="userService" /> -->
			</b:bean>
		</b:property>

		<!-- erreur de parsing de xml, le seul pouvant transmettre des attributs -->
		<b:property name="ticketValidator">
			<b:bean class="org.jasig.cas.client.validation.Saml11TicketValidator">
				<b:constructor-arg index="0"
					value="${cas.protocol}://${cas.server.host}/${cas.app.name}" />
			</b:bean>
		</b:property>

		<b:property name="statelessTicketCache">
			<b:bean
				class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
				<b:property name="cache">
					<b:bean id="ehcache" class="net.sf.ehcache.Cache"
						init-method="initialise" destroy-method="dispose">
						<b:constructor-arg value="casTickets" />
						<b:constructor-arg value="50" />
						<b:constructor-arg value="true" />
						<b:constructor-arg value="false" />
						<b:constructor-arg value="3600" />
						<b:constructor-arg value="900" />
						<b:property name="cacheManager">
							<b:bean
								class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
						</b:property>
					</b:bean>
				</b:property>
			</b:bean>
		</b:property>
	</b:bean>

	<global-method-security secured-annotations="enabled"
		pre-post-annotations="enabled">
		
		<expression-handler ref="defaultMethodSecurityExpressionHandler" />
	</global-method-security>

	<b:bean id="defaultMethodSecurityExpressionHandler"
		class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<b:property name="roleHierarchy" ref="roleHierarchy" />
	</b:bean>

	<!-- 1.4. Hierarchical Roles -->
	<b:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<b:property name="decisionVoters">
			<b:list>
				<b:ref bean="roleVoter" />
				<b:bean
					class="org.springframework.security.web.access.expression.WebExpressionVoter" />
				<b:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
				<b:ref bean="webExpressionHandler" />
			</b:list>
		</b:property>
	</b:bean>

	<b:bean id="webExpressionHandler"
		class="org.springframework.security.web.access.expression.WebExpressionVoter">
		<b:property name="expressionHandler">
			<b:ref bean="expressionHandler" />
		</b:property>
	</b:bean>

	<b:bean id="expressionHandler"
		class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
		<b:property name="roleHierarchy" ref="roleHierarchy" />
	</b:bean>

	<b:bean id="roleVoter"
		class="org.springframework.security.access.vote.RoleHierarchyVoter">
		<b:constructor-arg ref="roleHierarchy" />
		<!-- A décommenter pour ne plus etre obligé de préfixé les roles par ROLE_ -->
		<!-- <b:property name="rolePrefix" value="" /> -->
	</b:bean>

	<b:bean id="roleHierarchy"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<b:property name="hierarchy">
			<b:value>
			    SUPER_ADMIN > ADMIN
				SUPER_ADMIN > SUPER_MODERATEUR
				
				SUPER_MODERATEUR > MODERATEUR
				SUPER_MODERATEUR > VIE_ETUDIANTE
				SUPER_MODERATEUR > ASSOCIATION
			</b:value>
		</b:property>
	</b:bean>
	<!-- fin 1.4. Hierarchical Roles -->

<!-- configuration des urls du cas-client et du cas-server dans car-url.xml -->
</b:beans>
